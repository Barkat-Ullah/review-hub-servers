generator client {
  provider = "prisma-client-js"
  output   = "generated/prisma-client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  name      String
  username  String    @unique
  email     String    @unique
  password  String
  role      User_Role @default(USER)
  isDeleted Boolean   @default(false)

  reviews Review[]
  votes   Vote[]
  Comment Comment[]
  Payment Payment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Category {
  id        String  @id @default(uuid())
  name      String  @unique
  isDeleted Boolean @default(false)

  reviews Review[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("categories")
}

model Review {
  id                String        @id @default(uuid())
  title             String
  description       String
  rating            Int
  purchaseSource    String?
  imageUrls         String[]
  status            Review_Status @default(DRAFT)
  isPremium         Boolean       @default(false)
  price             Float?
  reasonToUnpublish String?

  // Relations
  user   User   @relation(fields: [userId], references: [id])
  userId String

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String

  votes   Vote[]
  Comment Comment[]
  Payment Payment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("reviews")
}

model Vote {
  vote VoteType

  // Relations
  user   User   @relation(fields: [userId], references: [id])
  userId String

  review   Review @relation(fields: [reviewId], references: [id])
  reviewId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, reviewId])
  @@map("votes")
}

model Comment {
  id      String @id @default(uuid())
  content String

  // Nester comments
  parentId  String?
  parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[] @relation("CommentReplies")

  // Relations
  user   User   @relation(fields: [userId], references: [id])
  userId String

  review   Review @relation(fields: [reviewId], references: [id])
  reviewId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("comments")
}

model Payment {
  id            String         @id @default(uuid())
  amount        Float
  transactionId String
  status        Payment_Status @default(PENDING)

  // Relations
  review   Review @relation(fields: [reviewId], references: [id])
  reviewId String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("payments")
}

enum User_Role {
  USER
  ADMIN
}

enum User_Status {
  ACTIVE
  BLOCKED
  DELETED
}

enum Review_Status {
  PENDING
  DRAFT
  PUBLISHED
  UNPUBLISHED
}

enum Payment_Status {
  PENDING
  PAID
  UNPAID
}

enum VoteType {
  UPVOTE
  DOWNVOTE
  NONE
}
